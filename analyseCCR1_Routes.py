#!/usr/bin/python

## CM This script processes the CCR1 routing table and looks up the NMAPs database for the last MAC behind an IP. This is done by iterating each subnet 1 by 1.
import math
import re
subnetPosition = 0
subnet = "0"
subnets = "0"
spacer = "\t\t"
classDir="classes"
seperater = "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
#print (header)
#print (seperater)
import re
#print ""
#print ""
for rawSubnets in open("CCR1Routes.terse.txt",'r'):
	## Extact the info from the route read from file above.
	found = 0
	process = 1
	subnet = rawSubnets[rawSubnets.find(" dst-address=")+1:].split("=")[1].split(" ")[0].split("/")[0]
	mask = rawSubnets[rawSubnets.find(" dst-address=")+1:].split("=")[1].split(" ")[0].split("/")[1]
	gateway = rawSubnets[rawSubnets.find("way=")+1:].split()[0]
	nextHop = rawSubnets[rawSubnets.find("via")+4:].split()[0]
	gate = gateway.split("=")[1]
	print "--------------------------------------------------------------------------"
	print "Subnet:" + subnet + "/" + mask + "                " + subnet + ".classes" + "..................." + gate + "  " + nextHop	
	print "--------------------------------------------------------------------------"
	fileName=subnet + ".classes"
	file = open(fileName,'w')
	file.write('#-------------------------------------------------------------------------------------------------\n')
	file.write('### GENERATED BY analyseCCR1_Routes.py. This is the classes file for ' + subnet + '/' + mask + "    " + gate + "  " + nextHop + '\n')
	file.write('#-------------------------------------------------------------------------------------------------\n')
	## Its nice to have the decimal mask also, can't see a case/switch equivilant for Python so will use if elif
	if mask == "23":
		hosts = 510
		decMask = "255.255.254.0"
	elif mask == "24":
		hosts = 254
		decMask = "255.255.255.0"
	elif mask == "25":
		hosts = 126
		decMask = "255.255.255.128"
	elif mask == "26":
		hosts = 62
		decMask = "255.255.255.192"
	elif mask == "27":
		hosts = 30
		decMask = "255.255.255.224"
	elif mask == "28":
		hosts = 14
		decMask = "255.255.255.240"
	elif mask == "29":
		hosts = 6
		decMask = "255.255.255.248"
	elif mask == "30":
		hosts = 2
		decMask = "255.255.255.252"
		process = 1
	elif mask == "32":
		hosts = 1
		decMask = "255.255.255.255"
		process = 1
	## Cheating here if the mask is 23 we process as a 24
	if mask == "23":
		hosts = 254
		mask = "24"
		decMask = "255.255.255.0"
	## Now we need to break up the subnet ID into 4 quads so we can calculate the first and last ip
	splitIP=subnet.split(".")
        quad0 = splitIP[0]
        quad1 = splitIP[1]
        quad2 = splitIP[2]
        quad3 = splitIP[3]
	checked = str(quad0) + "."  + str(quad1) + "." + str(quad2) + "." + str(quad3)
	# Calculate first and last IP
	firstIP = int(quad3) + 1
	lastIP  = int(quad3) + int(hosts)
	#print str(firstIP) + " is the firstIP" 
 	#print "Subnet:" + subnet + "\t|\t" + mask + "\t|\t" + "First IP:" + str(firstIP) + "\t|\t"  + " Last IP:" + str(lastIP)
	## A for loop which runs hosts times, this is where we lookup "/root/leaseFilesAllServers/leasesOutput.csv" for a matching ip.
	for check in range(hosts):
		#print "Check is " + str(check)
		newCheck = check + firstIP
		#print "New Check is " + str(newCheck)
                ip = str(quad0) + "."  + str(quad1) + "." + str(quad2) + "." + str(newCheck)
		#print "Debug: Processing IP:" + ip
		## Code needed to query nmaps	
		import MySQLdb
		db = MySQLdb.connect("localhost","root","nmaps","docsis" )
		# prepare a cursor object using cursor() method
		cur = db.cursor()
		#print '\nSQL QUERY IS: select * from lease_table where ip_address =' + ip
		## Note working with variables here is similar to C  %s is a placeholder and we declare the variable name of s in the parenthsis at the end. In this case it is ip.
		cur.execute("SELECT * from lease_table where ip_address = %s and end > '2017-07-01' order by end desc limit 1" , (ip))
		for row in cur.fetchall():
			mac = row[1]
    			#print "IP: " + row[3] + "   " + "MAC: " + row[1]
        		print ip + spacer + mac

        		## Print the classes format
			file.write('host ' + ip + ' {hardware ethernet ' + mac + ';}\n')
			file.write('class "' + mac + '" {match if hardware = 01:' + mac + '; } ## IP:' + ip + '\n')
			file.write('pool {range ' + ip + ' ;deny unknown clients; allow members of "' + mac + '";}\n\n\n')
	# disconnect from server
	db.close()
	file.close()
